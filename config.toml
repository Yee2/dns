# 配置服务器监听端口
# type: tcp/udp
# address: ip:port
[[listen]]
type = "udp"
address = "0.0.0.0:53"

# 配置上级DNS服务器
# name: 服务器标识
# address: DNS服务器地址
# method: 查询方式，可以是 doh-json/doh-wireformat/tcp/udp
[[upstreams]]
name = "google"
address = "https://dns.google.com/resolve"
method = "doh-json"

[[upstreams]]
name = "cloudflare"
address = "https://1.1.1.1/dns-query"
method = "doh-wireformat"

[[upstreams]]
name = "cloudflare-tcp"
address = "1.1.1.1:53"
method = "tcp"

[[upstreams]]
name = "aliyun"
address = "223.5.5.5:53"
method = "udp"

# 配置解析规则
# 解析规则由上往下，逐条匹配，如何符合要求直接返回结果，如果不符合则执行下一条规则，规则 "other"
# name: 规则内容
# upstream: 查询服务器标识
# action: 表示动作，只能是 "reject"，拒绝解析服务，upstream/action 只能配置一个

# "name" 内容格式说明
# adblock:
# iplist: 解析得到的IP是否在列表里面
# prefix: 匹配域名的前缀
# suffix: 匹配域名的后缀
# contain: 是否包括某些内容
# fqdn: 完整域名匹配
# group: 分组匹配
# other: 匹配所有规则，相当于编程里面的 switch-case后面的default


#[[rules]]
#name = "adblock:filter.txt"
#action = "reject"
#
#[[rules]]
#name = "adblock:gfwlist.txt"
#upstream  = "cloudflare"

#[[rules]]
#name = "iplist:ip.txt"
#upstream = "aliyun"

[[rules]]
name = "group:block"
action = "reject"

[[rules]]
name = "group:gfwlist"
upstream = "cloudflare"

[[rules]]
name = "fqdn:dns.google.com"
upstream = "cloudflare"

[[rules]]
name = "other"
upstream = "aliyun"

[Groups.block]
list = []

[Groups.gfwlist]
list = []

# 配置本地解析
# name: 域名匹配规则，支持使用 "*" 和 "**",域名最后面的 "."可以忽略
# *.com可以匹配 a.com和b.com,不支持 a.a.com
# **.com可以匹配 a.com和b.com 和 a.a.com
# type: 记录类型，支持 A/AAAA/TXT/NS/CNAME/MX
# ttl: TTL
# context: 记录值对应 A/AAAA是IP地址
[[records]]
name = "example.local"
type = "A"
ttl = 3600
context = "127.0.0.1"
